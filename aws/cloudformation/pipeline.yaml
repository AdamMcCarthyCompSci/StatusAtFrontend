AWSTemplateFormatVersion: '2010-09-09'
Description: 'StatusAt Frontend CI/CD Pipeline'

Parameters:
  ProjectName:
    Type: String
    Default: statusat-frontend
    Description: Name of the project
  
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  GitHubOwner:
    Type: String
    Description: GitHub repository owner
  
  GitHubRepo:
    Type: String
    Description: GitHub repository name
  
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch to track
  
  InfrastructureStackName:
    Type: String
    Description: Name of the infrastructure CloudFormation stack

Resources:
  # CodeBuild Service Role
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 
                    - '${BucketArn}/*'
                    - BucketArn: 
                        Fn::Sub:
                          - 'arn:aws:s3:::${BucketName}'
                          - BucketName: !ImportValue 
                              Fn::Sub: '${InfrastructureStackName}-WebsiteBucket'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: 
                  Fn::Sub:
                    - 'arn:aws:s3:::${BucketName}'
                    - BucketName: !ImportValue 
                        Fn::Sub: '${InfrastructureStackName}-WebsiteBucket'
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource: !Sub
                  - 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${DistributionId}'
                  - DistributionId: !ImportValue 
                      Fn::Sub: '${InfrastructureStackName}-CloudFrontDistributionId'

  # CodePipeline Service Role
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub '${ArtifactsBucket}/*'
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !GetAtt CodeBuildProject.Arn
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !Ref GitHubConnection

  # S3 Bucket for Pipeline Artifacts
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-pipeline-artifacts-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteArtifacts
            Status: Enabled
            ExpirationInDays: 30

  # GitHub Connection (CodeStar Connections)
  GitHubConnection:
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ConnectionName: !Sub '${ProjectName}-${Environment}-github'
      ProviderType: GitHub

  # CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-build'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL  # Cost-optimized
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        EnvironmentVariables:
          - Name: S3_BUCKET
            Value: !ImportValue 
              Fn::Sub: '${InfrastructureStackName}-WebsiteBucket'
          - Name: CLOUDFRONT_DISTRIBUTION_ID
            Value: !ImportValue 
              Fn::Sub: '${InfrastructureStackName}-CloudFrontDistributionId'
          - Name: NODE_ENV
            Value: production
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Build started on `date`
                - echo Installing dependencies...
                - npm ci
            build:
              commands:
                - echo Running tests...
                - npm run test -- --run
                - echo Building the React application...
                - npm run build
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Uploading to S3...
                - aws s3 sync dist/ s3://$S3_BUCKET --delete
                - echo Creating CloudFront invalidation...
                - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
          artifacts:
            files:
              - '**/*'
            base-directory: dist

  # CodePipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-pipeline'
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: !Ref GitHubConnection
                FullRepositoryId: !Sub '${GitHubOwner}/${GitHubRepo}'
                BranchName: !Ref GitHubBranch
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput

Outputs:
  PipelineName:
    Description: Name of the CodePipeline
    Value: !Ref CodePipeline
  
  GitHubConnectionArn:
    Description: GitHub Connection ARN (needs manual authorization)
    Value: !Ref GitHubConnection
  
  CodeBuildProjectName:
    Description: CodeBuild Project Name
    Value: !Ref CodeBuildProject
